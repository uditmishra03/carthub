name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: Run Black
      run: black --check .
      
    - name: Run isort
      run: isort --check-only .
      
    - name: Run flake8
      run: flake8 .
      
    - name: Run mypy
      run: mypy . --ignore-missing-imports
      
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit Security Scan
      uses: securecodewarrior/github-action-bandit@v1
      with:
        path: "."
        
    - name: Run Safety Check
      run: |
        pip install safety
        safety check
        
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(cat VERSION)-${GITHUB_SHA::8}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Build and push backend image
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/shopping-cart-backend:${{ steps.version.outputs.version }} .
        docker build -t $ECR_REGISTRY/shopping-cart-backend:latest .
        docker push $ECR_REGISTRY/shopping-cart-backend:${{ steps.version.outputs.version }}
        docker push $ECR_REGISTRY/shopping-cart-backend:latest
        
    - name: Build and push frontend image
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/shopping-cart-frontend:${{ steps.version.outputs.version }} .
        docker build -t $ECR_REGISTRY/shopping-cart-frontend:latest .
        docker push $ECR_REGISTRY/shopping-cart-frontend:${{ steps.version.outputs.version }}
        docker push $ECR_REGISTRY/shopping-cart-frontend:latest
        
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_STAGING }}
        
    - name: Deploy to staging
      run: |
        # Update image tags in manifests
        sed -i "s|BACKEND_IMAGE_URI|$ECR_REGISTRY/shopping-cart-backend:latest|g" k8s/backend/deployment.yaml
        sed -i "s|FRONTEND_IMAGE_URI|$ECR_REGISTRY/shopping-cart-frontend:latest|g" k8s/frontend/deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/backend/
        kubectl apply -f k8s/frontend/
        kubectl apply -f k8s/database/
        
        # Wait for rollout
        kubectl rollout status deployment/backend-deployment -n shopping-cart
        kubectl rollout status deployment/frontend-deployment -n shopping-cart
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_PRODUCTION }}
        
    - name: Deploy to production
      run: |
        # Update image tags in manifests
        sed -i "s|BACKEND_IMAGE_URI|$ECR_REGISTRY/shopping-cart-backend:${{ steps.version.outputs.version }}|g" k8s/backend/deployment.yaml
        sed -i "s|FRONTEND_IMAGE_URI|$ECR_REGISTRY/shopping-cart-frontend:${{ steps.version.outputs.version }}|g" k8s/frontend/deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/backend/
        kubectl apply -f k8s/frontend/
        kubectl apply -f k8s/database/
        
        # Wait for rollout
        kubectl rollout status deployment/backend-deployment -n shopping-cart
        kubectl rollout status deployment/frontend-deployment -n shopping-cart
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes in this Release
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ## Deployment
          
          - Backend Image: `${{ env.ECR_REGISTRY }}/shopping-cart-backend:${{ steps.version.outputs.version }}`
          - Frontend Image: `${{ env.ECR_REGISTRY }}/shopping-cart-frontend:${{ steps.version.outputs.version }}`
          
        draft: false
        prerelease: false
